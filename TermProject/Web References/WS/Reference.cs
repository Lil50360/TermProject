//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TermProject.WS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TermProjectWSSoap", Namespace="http://tempuri.org/")]
    public partial class TermProjectWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RegisterOperationCompleted;
        
        private System.Threading.SendOrPostCallback UsernameExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback PasswordMatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectUserTypeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TermProjectWS() {
            this.Url = global::TermProject.Properties.Settings.Default.TermProject_WS_TermProjectWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RegisterCompletedEventHandler RegisterCompleted;
        
        /// <remarks/>
        public event UsernameExistCompletedEventHandler UsernameExistCompleted;
        
        /// <remarks/>
        public event PasswordMatchCompletedEventHandler PasswordMatchCompleted;
        
        /// <remarks/>
        public event GetUserNameCompletedEventHandler GetUserNameCompleted;
        
        /// <remarks/>
        public event GetUserIDCompletedEventHandler GetUserIDCompleted;
        
        /// <remarks/>
        public event SelectUserTypeCompletedEventHandler SelectUserTypeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Register", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Register(string userType, string userName, string password, string firstName, string lastName, string email) {
            this.Invoke("Register", new object[] {
                        userType,
                        userName,
                        password,
                        firstName,
                        lastName,
                        email});
        }
        
        /// <remarks/>
        public void RegisterAsync(string userType, string userName, string password, string firstName, string lastName, string email) {
            this.RegisterAsync(userType, userName, password, firstName, lastName, email, null);
        }
        
        /// <remarks/>
        public void RegisterAsync(string userType, string userName, string password, string firstName, string lastName, string email, object userState) {
            if ((this.RegisterOperationCompleted == null)) {
                this.RegisterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterOperationCompleted);
            }
            this.InvokeAsync("Register", new object[] {
                        userType,
                        userName,
                        password,
                        firstName,
                        lastName,
                        email}, this.RegisterOperationCompleted, userState);
        }
        
        private void OnRegisterOperationCompleted(object arg) {
            if ((this.RegisterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UsernameExist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UsernameExist(string Username) {
            object[] results = this.Invoke("UsernameExist", new object[] {
                        Username});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UsernameExistAsync(string Username) {
            this.UsernameExistAsync(Username, null);
        }
        
        /// <remarks/>
        public void UsernameExistAsync(string Username, object userState) {
            if ((this.UsernameExistOperationCompleted == null)) {
                this.UsernameExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUsernameExistOperationCompleted);
            }
            this.InvokeAsync("UsernameExist", new object[] {
                        Username}, this.UsernameExistOperationCompleted, userState);
        }
        
        private void OnUsernameExistOperationCompleted(object arg) {
            if ((this.UsernameExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UsernameExistCompleted(this, new UsernameExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PasswordMatch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PasswordMatch(string Username, string Password) {
            object[] results = this.Invoke("PasswordMatch", new object[] {
                        Username,
                        Password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PasswordMatchAsync(string Username, string Password) {
            this.PasswordMatchAsync(Username, Password, null);
        }
        
        /// <remarks/>
        public void PasswordMatchAsync(string Username, string Password, object userState) {
            if ((this.PasswordMatchOperationCompleted == null)) {
                this.PasswordMatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPasswordMatchOperationCompleted);
            }
            this.InvokeAsync("PasswordMatch", new object[] {
                        Username,
                        Password}, this.PasswordMatchOperationCompleted, userState);
        }
        
        private void OnPasswordMatchOperationCompleted(object arg) {
            if ((this.PasswordMatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PasswordMatchCompleted(this, new PasswordMatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserName(string Username) {
            object[] results = this.Invoke("GetUserName", new object[] {
                        Username});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserNameAsync(string Username) {
            this.GetUserNameAsync(Username, null);
        }
        
        /// <remarks/>
        public void GetUserNameAsync(string Username, object userState) {
            if ((this.GetUserNameOperationCompleted == null)) {
                this.GetUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserNameOperationCompleted);
            }
            this.InvokeAsync("GetUserName", new object[] {
                        Username}, this.GetUserNameOperationCompleted, userState);
        }
        
        private void OnGetUserNameOperationCompleted(object arg) {
            if ((this.GetUserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserNameCompleted(this, new GetUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUserID(string Username) {
            object[] results = this.Invoke("GetUserID", new object[] {
                        Username});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserIDAsync(string Username) {
            this.GetUserIDAsync(Username, null);
        }
        
        /// <remarks/>
        public void GetUserIDAsync(string Username, object userState) {
            if ((this.GetUserIDOperationCompleted == null)) {
                this.GetUserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserIDOperationCompleted);
            }
            this.InvokeAsync("GetUserID", new object[] {
                        Username}, this.GetUserIDOperationCompleted, userState);
        }
        
        private void OnGetUserIDOperationCompleted(object arg) {
            if ((this.GetUserIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserIDCompleted(this, new GetUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectUserType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectUserType(string securityCode, string userName) {
            object[] results = this.Invoke("SelectUserType", new object[] {
                        securityCode,
                        userName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SelectUserTypeAsync(string securityCode, string userName) {
            this.SelectUserTypeAsync(securityCode, userName, null);
        }
        
        /// <remarks/>
        public void SelectUserTypeAsync(string securityCode, string userName, object userState) {
            if ((this.SelectUserTypeOperationCompleted == null)) {
                this.SelectUserTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectUserTypeOperationCompleted);
            }
            this.InvokeAsync("SelectUserType", new object[] {
                        securityCode,
                        userName}, this.SelectUserTypeOperationCompleted, userState);
        }
        
        private void OnSelectUserTypeOperationCompleted(object arg) {
            if ((this.SelectUserTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectUserTypeCompleted(this, new SelectUserTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void RegisterCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void UsernameExistCompletedEventHandler(object sender, UsernameExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UsernameExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UsernameExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void PasswordMatchCompletedEventHandler(object sender, PasswordMatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PasswordMatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PasswordMatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUserNameCompletedEventHandler(object sender, GetUserNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void GetUserIDCompletedEventHandler(object sender, GetUserIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void SelectUserTypeCompletedEventHandler(object sender, SelectUserTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectUserTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectUserTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591